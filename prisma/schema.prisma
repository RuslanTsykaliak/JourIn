// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?

  // jourIn extensions
  username     String?   @unique
  role         Role      @default(USER) // e.g., "user", "guide", "admin"
  joinedAt     DateTime  @default(now())
  streakCount  Int       @default(0)
  lastCheckIn  DateTime?
  identityTag  String? // e.g., "Architect", "Seeker", "Alchemist"
  milestones   Milestone[]
  journalEntries JournalEntry[]
  habitEntries  HabitEntry[]
  feedback     Feedback[]

  accounts Account[]
  sessions Session[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Milestone {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  completedAt DateTime @default(now())
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum Role {
  USER
  GUIDE
  ADMIN
}

model JournalEntry {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  whatWentWell           String?
  whatILearned           String?
  whatWouldDoDifferently String?
  nextStep               String?
  customTitles           Json?
  dynamicFields          Json? // New field for dynamic custom fields
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model HabitEntry {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  date        DateTime
  data        Json
  comments    String?
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@index([userId])
}

model Feedback {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  content   String
  userId    String?  @db.ObjectId
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
}
